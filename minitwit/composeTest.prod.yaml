version: "3.8"
services:

  traefik:
    image: traefik:v2.6
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8000
        published: 8000
        protocol: tcp
        mode: host
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.dashboard.rule=Host(`minitwit-swarm.online`) && Path(`/dashboard`)
        - traefik.http.routers.dashboard.service=api@internal
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      #- traefik-public-certificates:/certificates
    command:
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      #- --providers.docker.exposedbydefault=false
      - --providers.docker.swarmmode
      - --entrypoints.http.address=:80
      - --accesslog
      - --log
      - --api.dashboard=true
      #- --metrics
      #- --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    networks:
      - traefik-public

  frontend:
    image: virginity/minitwit_frontend:latest
    command: serve -s build -l 3000
    restart: always
    networks:
      - main
      - traefik-public
    deploy:
      mode: replicated
      replicas: 3
      labels:
        #- traefik.enable=true
        #- traefik.docker.network=traefik-public
        - traefik.http.routers.frontend.rule=Host(`minitwit-swarm.online`)
        - traefik.http.services.frontend.loadbalancer.server.port=80
        
  db:
    image: postgres:14.2
    ports:
      - 5432:5432
    restart: always
    environment:
      - POSTGRES_USER=sa
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=Minitwit
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - main
      - traefik-public
    deploy:
      placement:
        constraints:
          - node.role == manager
          
  backend:

    image: virginity/minitwit_backend:latest
    restart: always
    environment:
      ConnectionStrings__Minitwit:
    secrets:
      - source: connection_string
        target: ConnectionStrings__Minitwit
      - source: jwt_key
        target: AppSettings__Secret
    restart: on-failure
    networks:
      - main
      - traefik-public
    deploy:
      mode: replicated
      replicas: 3
      labels:
        #- traefik.enable=true
        #- traefik.docker.network=traefik-public
        - traefik.http.routers.backend.rule=Host(`minitwit-swarm.online`) && PathPrefix(`/api`)
        - traefik.http.services.backend.loadbalancer.server.port=80
        
networks:
  main:
    name: minitwit-internal
  traefik-public:
    driver: overlay
    attachable: true
    name: traefik-public
  
volumes:
  grafana_data:
  postgres_data:
    # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:
      
secrets:
  db_password:
    file: .local/db_password.txt
  connection_string:
    file: .local/connection_string.txt
  jwt_key:
    file: .local/jwt_key.txt

