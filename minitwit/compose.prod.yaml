version: "3.8"
services:

  traefik:
    image: traefik:v2.6
    container_name: "traefik"
    labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables USERNAME and HASHED_PASSWORD
        #- traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-http.rule=Host(`minitwit.online`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`minitwit.online`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.routers.traefik-public-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on address 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on address 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=eythor108@gmail.com
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
   
    deploy:
       placement:
          constraints:
            - node.role == manager
      
  frontend:

    image: virginity/minitwit_frontend:latest

    container_name: react_frontend

    ports:
      - 3000:3000

    command: serve -s build -l 3000

    depends_on:
      - backend

    restart: always

    networks:
      - main
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.minitwit-frontend-http.rule=PathPrefix(`/`)
        - traefik.http.services.minitwit-frontend.loadbalancer.server.port=80
      mode: replicated
      replicas: 2
      placement: 
        constraints:
          - node.role == worker
  
  db:
    container_name: postgres_database
    image: postgres:14.2
    ports:
      - 5432:5432
    restart: always
    environment:
      - POSTGRES_USER=sa
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=Minitwit
    secrets:
      - db_password
    volumes:
      - /var/lib/docker/volume/data:/var/lib/postgresql/data
    networks:
      - main
    deploy:
      placement: 
        constraints:
          - node.role == manager


  prometheus:
    image: prom/prometheus:v2.33.5
    container_name: prometheus
    restart: always
    ports: 
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - main
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - 3001:3000
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana_data:/var/lib/grafana
    networks:
      - main
      
  backend:

    image: virginity/minitwit_backend:latest
    container_name: dotnet_backend
    restart: always
    ports:
      - 5229:80

    environment:
      ConnectionStrings__Minitwit:
    depends_on:
      - db
      - prometheus
      - grafana
    secrets:
      - source: connection_string
        target: ConnectionStrings__Minitwit
      - source: jwt_key
        target: AppSettings__Secret
    restart: on-failure
    networks:
      - main
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.minitwit-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.minitwit-backend.loadbalancer.server.port=80
      mode: replicated
      replicas: 3
      placement: 
        constraints:
          - node.role == worker
  
  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.17.1"
    container_name: elasticsearch
    environment:
      - "ES_JAVA_OPTS=-Xms512 -Xmx512m"
      - "discovery.type=single-node"
    volumes:
      - elk_elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elastic
      - main
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
    
  kibana:
    image: "docker.elastic.co/kibana/kibana:7.17.1"
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      SERVER_NAME: 'minitwit.online'
      SERVER_PUBLICBASEURL: 'https://minitwit.online/kibana'
      SERVER_BASEPATH: '/kibana'
    networks:
      - elastic
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
  
  filebeat:
    image: "docker.elastic.co/beats/filebeat:7.17.1"
    container_name: filebeat
    environment:
      - "ELK_USER=${ELK_USER}"
    user: root
    volumes:
      - ${ELK_DIR}/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - elastic
  
networks:
  main:
    name: minitwit-internal
  elastic:
  traefik-public:
    # Allow setting it to false for testing
    external: true
  
volumes:
  elk_elasticsearch_data:
  grafana_data:
  traefik-public-certificates:

    
secrets:
  db_password:
    file: .local/db_password.txt
  connection_string:
    file: .local/connection_string.txt
  jwt_key:
    file: .local/jwt_key.txt
