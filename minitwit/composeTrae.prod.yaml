version: "3.8"
services:

  traefik:
    image: traefik:v2.6
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8000
        published: 8000
        protocol: tcp
        mode: host
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # admin-auth middleware with HTTP Basic auth
        # Using the environment variables USERNAME and HASHED_PASSWORD
         #- traefik.http.middlewares.admin-auth.basicauth.users=admin:$$apr1$$JVKKO/1u$$3FfFA3QC.uKBBs3FeJ2Eo/
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-http.rule=Host(`minitwit-swarm.online`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.rule=Host(`minitwit-swarm.online`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        # Enable HTTP Basic auth, using the middleware created above
        #- traefik.http.routers.traefik-public-https.middlewares=admin-auth
        # Define the port inside of the Docker service to use
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=kongstad@outlook.com
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      #- --metrics
      #- --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

  frontend:
    image: virginity/minitwit_frontend:latest
    ports:
      - 3000:3000
    command: serve -s build -l 3000
    restart: always
    networks:
      - main
      - traefik-public
    deploy:
      mode: replicated
      replicas: 2
      placement: 
        constraints:
          - node.role == worker
      labels:
        - traefik.port=3000
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.minitwit-app-http.rule=Host(`minitwit-swarm.online`) && PathPrefix(`/app`)
        - traefik.http.routers.minitwit-app-http.entrypoints=http
        - traefik.http.routers.minitwit-app-http.middlewares=https-redirect
        - traefik.http.routers.minitwit-app-https.rule=Host(`minitwit-swarm.online`) && PathPrefix(`/app`)
        - traefik.http.routers.minitwit-app-https.entrypoints=https
        - traefik.http.routers.minitwit-app-https.tls=true
        - traefik.http.routers.minitwit-app-https.tls.certresolver=le
        - traefik.http.services.minitwit-app.loadbalancer.server.port=3000
  
  db:
    image: postgres:14.2
    ports:
      - 5432:5432
    restart: always
    environment:
      - POSTGRES_USER=sa
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=Minitwit
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - main
      - traefik-public
    deploy:
      placement: 
        constraints:
          - node.role == manager


  prometheus:
    image: prom/prometheus:v2.33.5
    restart: always
    ports: 
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - main
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 128M
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.minitwit-prometheus-http.rule=Host(`minitwit-swarm.online`) && PathPrefix(`/metrics`)
        - traefik.http.routers.minitwit-prometheus-http.entrypoints=http
        - traefik.http.routers.minitwit-prometheus-http.middlewares=https-redirect
        - traefik.http.routers.minitwit-prometheus-https.rule=Host(`minitwit-swarm.online`) && PathPrefix(`/metrics`)
        - traefik.http.routers.minitwit-prometheus-https.entrypoints=https
        - traefik.http.routers.minitwit-prometheus-https.tls=true
        - traefik.http.routers.minitwit-prometheus-https.tls.certresolver=le
        - traefik.http.services.minitwit-prometheus.loadbalancer.server.port=9090
  
  grafana:
    image: grafana/grafana
    restart: always
    ports:
      - 3001:3000
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana_data:/var/lib/grafana
    networks:
      - main
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.minitwit-grafana-http.rule=Host(`grafana.minitwit-swarm.online`)
        - traefik.http.routers.minitwit-grafana-http.entrypoints=http
        - traefik.http.routers.minitwit-grafana-http.middlewares=https-redirect
        - traefik.http.routers.minitwit-grafana-https.rule=Host(`grafana.minitwit-swarm.online`)
        - traefik.http.routers.minitwit-grafana-https.entrypoints=https
        - traefik.http.routers.minitwit-grafana-https.tls=true
        - traefik.http.routers.minitwit-grafana-https.tls.certresolver=le
        - traefik.http.services.minitwit-grafana.loadbalancer.server.port=3001
      
  backend:

    image: virginity/minitwit_backend:latest
    restart: always
    ports:
      - 5229:80
    environment:
      ConnectionStrings__Minitwit:
    secrets:
      - source: connection_string
        target: ConnectionStrings__Minitwit
      - source: jwt_key
        target: AppSettings__Secret
    restart: on-failure
    networks:
      - main
      - traefik-public
    deploy:
      mode: replicated
      replicas: 3
      placement: 
        constraints:
          - node.role == worker
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.minitwit-api-http.rule=Host(`minitwit-swarm.online`) && PathPrefix(`/api`)
        - traefik.http.routers.minitwit-api-http.entrypoints=http
        - traefik.http.routers.minitwit-api-http.middlewares=https-redirect
        - traefik.http.routers.minitwit-api-https.rule=Host(`minitwit-swarm.online`) && PathPrefix(`/api`)
        - traefik.http.routers.minitwit-api-https.entrypoints=https
        - traefik.http.routers.minitwit-api-https.tls=true
        - traefik.http.routers.minitwit-api-https.tls.certresolver=le
        - traefik.http.services.minitwit-api.loadbalancer.server.port=5229
 
  
networks:
  main:
    name: minitwit-internal
  traefik-public:
    external: true
  
volumes:
  grafana_data:
  postgres_data:
    # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:
      
secrets:
  db_password:
    file: .local/db_password.txt
  connection_string:
    file: .local/connection_string.txt
  jwt_key:
    file: .local/jwt_key.txt
